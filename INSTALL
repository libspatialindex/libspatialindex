Installation Instructions
*************************

Copyright (C) 1994-2020 Free
Software Foundation, Inc.

This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Basic Installation
==================

These are generic installation instructions.

   If you need to do unusual things to compile the package, please try
to figure out how `cmake' could check whether to do them, and mail
diffs or instructions to the address given in the `README' or send 
a pull request so they can be considered for the next release.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `cmake .' to check and generate a `Makefile` for your system.

  2. Type `make' to compile the package. You also can increase the compiling speed by `make ${nproc:-8}'.

  3. Type `make install' to install the programs and any data files and
     documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `cmake' created, you need to remove them manually.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that the
`cmake' does not know about.  Check [CMake Properties](https://cmake.org/cmake/help/v3.5/manual/cmake-properties.7.html) for
details on some of the pertinent environment variables.
*Note: not all `cmake' variables can be applicable in this `CMakeLists' file.

   You can give `cmake' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     cmake . -DCMAKE_CXX_COMPILER_ID=Intel 

or by environment variables:

   CMAKE_CXX_COMPILER_ID=Intel cmake .

   *Note Defining Variables::, for more details.

will cause the specified compiler ID to be used as the C++ compiler.

Compiling For Multiple Architectures
====================================

You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `cmake'.  `cmake' automatically checks for the
source code in the directory that `CMakeLists.txt' is in.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make clean' and remove `cmake-generated'
files before reconfiguring for another architecture.

Installation Names
==================

By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc. You can specify an
installation prefix other than `/usr/local' by giving `cmake' the
option `-B PREFIX'.  Here is an example:

      cmake . -B /home/user1/my-build/
